/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Game.ts":
/*!*********************!*\
  !*** ./src/Game.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GameResult = exports.Player = void 0;
const utils_1 = __webpack_require__(/*! ./utils */ "./src/utils.ts");
var Player;
(function (Player) {
    Player[Player["NONE"] = 0] = "NONE";
    Player[Player["X"] = 1] = "X";
    Player[Player["O"] = 2] = "O";
})(Player = exports.Player || (exports.Player = {}));
var GameResult;
(function (GameResult) {
    GameResult[GameResult["PLAYING"] = 0] = "PLAYING";
    GameResult[GameResult["WIN"] = 1] = "WIN";
    GameResult[GameResult["DRAW"] = 2] = "DRAW";
})(GameResult = exports.GameResult || (exports.GameResult = {}));
class Game {
    constructor(onStart, onBeforeMove, onAfterMove, onFinish) {
        this.onStart = onStart;
        this.onBeforeMove = onBeforeMove;
        this.onAfterMove = onAfterMove;
        this.onFinish = onFinish;
        // Game state.
        this.state = {
            boardMatrix: this.cloneBoard(),
            roundMovesPerIndex: [],
            roundMovesPerPlayer: {
                [Player.X]: [],
                [Player.O]: []
            },
            winner: "",
            winningTiles: [],
            currentPlayer: Player.X,
            result: GameResult.PLAYING
        };
        this.onStart = onStart === null || onStart === void 0 ? void 0 : onStart.bind(this);
        this.onBeforeMove = onBeforeMove === null || onBeforeMove === void 0 ? void 0 : onBeforeMove.bind(this);
        this.onAfterMove = onAfterMove === null || onAfterMove === void 0 ? void 0 : onAfterMove.bind(this);
        this.onFinish = onFinish === null || onFinish === void 0 ? void 0 : onFinish.bind(this);
    }
    cloneBoard() {
        return Game.BOARD_MATRIX.slice(0).map((row) => {
            return row.slice(0);
        });
    }
    drawStartButton() {
        const elem = document.createElement("button");
        elem.style.display = "absolute";
        elem.innerText = "Re-start game";
        elem.style.marginTop = "1em";
        elem.style.userSelect = "none";
        elem.style.cursor = "pointer";
        this.$startBtn = elem;
        this.$canvas.appendChild(this.$startBtn);
    }
    drawAnnouncements(text) {
        const elem = document.createElement("div");
        elem.style.display = "absolute";
        elem.style.padding = "1em";
        elem.style.fontStyle = "italics";
        elem.innerText = text;
        this.$announcements = elem;
        this.$canvas.appendChild(this.$announcements);
    }
    removeAnnouncements() {
        return this.$announcements && this.$announcements.remove();
    }
    drawCanvas() {
        this.$canvas = document.createElement("div");
        this.$canvas.style.boxSizing = "border-box";
        this.$canvas.style.textAlign = "center";
        this.$canvas.style.position = "relative";
        this.$canvas.id = "canvas";
        this.$canvas.style.width = `${Game.BOARD_BOX_SIZE * Game.BOARD_SIZE}px`;
        this.$canvas.style.height = `${Game.BOARD_BOX_SIZE * Game.BOARD_SIZE}px`;
        for (let i = 0; i < Game.BOARD_SIZE * Game.BOARD_SIZE; i++) {
            const $box = document.createElement("div");
            $box.style.float = "left";
            $box.style.width = `${Game.BOARD_BOX_SIZE}px`;
            $box.style.height = `${Game.BOARD_BOX_SIZE}px`;
            $box.style.lineHeight = `${Game.BOARD_BOX_SIZE}px`;
            $box.style.border = "1px solid black";
            $box.style.boxShadow = "0 0 0 1px black";
            $box.style.boxSizing = "border-box";
            $box.style.fontSize = `${Game.BOARD_BOX_SIZE / 2}px`;
            $box.style.cursor = "pointer";
            $box.style.userSelect = "none";
            $box.id = `box-${i}`;
            $box.dataset.index = `${i}`;
            $box.dataset.row = `${Math.floor(i / Game.BOARD_SIZE)}`;
            $box.dataset.column = `${i % Game.BOARD_SIZE}`;
            $box.className = "box";
            this.$canvas.appendChild($box);
        }
        document.body.appendChild(this.$canvas);
    }
    bindEvents() {
        this.$canvas.addEventListener('click', (e) => {
            if (this.onBeforeMove) {
                this.onBeforeMove();
            }
            this.onBoardBoxClick.bind(this)(e);
            // Only execute the next callback if the game is not finished.
            if (this.state.result === GameResult.PLAYING && this.onAfterMove) {
                this.onAfterMove();
            }
        });
        this.$startBtn.addEventListener('click', () => {
            this.reset();
            this.resetRender();
        });
    }
    onBoardBoxClick(e) {
        const $box = e.target;
        // Prevent propagating click callback if:
        // 1. the DOM element clicked is not a "box".
        // 2. the "box" already has a value in it.
        // 3. A player already won the game.
        if ($box.className !== "box" || $box.innerText !== "" || this.state.result !== GameResult.PLAYING) {
            return false;
        }
        const index = parseInt($box.dataset.index, 10);
        const row = parseInt($box.dataset.row, 10);
        const column = parseInt($box.dataset.column, 10);
        // Store round moves.
        this.state.roundMovesPerPlayer[this.state.currentPlayer].push(index);
        this.state.roundMovesPerIndex.push(index);
        this.state.boardMatrix[row][column] = this.state.currentPlayer;
        $box.innerText = this.state.currentPlayer === Player.X ? "X" : "O";
        if (this.state.currentPlayer === Player.X) {
            this.state.currentPlayer = Player.O;
        }
        else {
            this.state.currentPlayer = Player.X;
        }
        const result = this.checkGameResult();
        if ([GameResult.WIN, GameResult.DRAW].includes(result)) {
            if (result === GameResult.WIN) {
                this.state.winningTiles.forEach((tileArr) => {
                    document.querySelector(`[data-row="${tileArr[0]}"][data-column="${tileArr[1]}"]`).style.backgroundColor = "red";
                });
                this.drawAnnouncements(`${this.state.winner} has won!`);
            }
            else if (result === GameResult.DRAW) {
                this.drawAnnouncements(`It's a draw!`);
            }
            if (this.onFinish) {
                this.onFinish();
            }
        }
    }
    // Methodology: brute check all rows and columns and diagonals.
    checkGameResult() {
        // Don't perform winning check until at least 5 moves.
        // 5 moves mean that X has moved 3 times and O only 2 times.
        if (this.state.roundMovesPerIndex.length < ((Game.BOARD_SIZE * 2) - 1)) {
            return GameResult.PLAYING;
        }
        for (let i = 0; i < Game.BOARD_SIZE; i++) {
            // Check rows.
            const rows = utils_1.unique(this.state.boardMatrix[i]);
            if (rows.length === 1 && rows[0] !== Player.NONE) {
                this.state.winner = this.getCurrentPlayerLabel();
                this.state.winningTiles = [[i, 0], [i, 1], [i, 2]];
                this.state.result = GameResult.WIN;
                return GameResult.WIN;
            }
            // Check columns.
            const columns = utils_1.unique([this.state.boardMatrix[0][i], this.state.boardMatrix[1][i], this.state.boardMatrix[2][i]]);
            if (columns.length === 1 && columns[0] !== Player.NONE) {
                this.state.winner = this.getCurrentPlayerLabel();
                this.state.winningTiles = [[0, i], [1, i], [2, i]];
                this.state.result = GameResult.WIN;
                return GameResult.WIN;
            }
        }
        // Check diags.
        const diag1 = utils_1.unique([this.state.boardMatrix[0][0], this.state.boardMatrix[1][1], this.state.boardMatrix[2][2]]);
        if (diag1.length === 1 && diag1[0] !== Player.NONE) {
            this.state.winner = this.getCurrentPlayerLabel();
            this.state.winningTiles = [[0, 0], [1, 1], [2, 2]];
            this.state.result = GameResult.WIN;
            return GameResult.WIN;
        }
        const diag2 = utils_1.unique([this.state.boardMatrix[0][2], this.state.boardMatrix[1][1], this.state.boardMatrix[2][0]]);
        if (diag2.length === 1 && diag2[0] !== Player.NONE) {
            this.state.winner = this.getCurrentPlayerLabel();
            this.state.winningTiles = [[0, 2], [1, 1], [2, 0]];
            this.state.result = GameResult.WIN;
            return GameResult.WIN;
        }
        if (this.state.roundMovesPerIndex.length === Game.BOARD_SIZE * Game.BOARD_SIZE) {
            this.state.result = GameResult.DRAW;
            return GameResult.DRAW;
        }
        return GameResult.PLAYING;
    }
    getCurrentPlayerLabel() {
        return this.state.currentPlayer === Player.X ? "X" : "O";
    }
    start() {
        this.reset();
        this.drawCanvas();
        this.drawStartButton();
        this.bindEvents();
        if (this.onStart) {
            this.onStart();
        }
    }
    reset() {
        this.state.winner = "";
        this.state.winningTiles = [];
        this.state.roundMovesPerIndex = [];
        this.state.roundMovesPerPlayer = {
            [Player.X]: [],
            [Player.O]: []
        };
        this.state.currentPlayer = Player.X;
        this.state.boardMatrix = this.cloneBoard();
        this.state.result = GameResult.PLAYING;
    }
    resetRender() {
        this.removeAnnouncements();
        this.$canvas.querySelectorAll(".box").forEach(($box) => {
            $box.innerText = "";
            $box.style.backgroundColor = "";
        });
    }
}
exports.default = Game;
// Settings.
Game.BOARD_SIZE = 3;
Game.BOARD_BOX_SIZE = 100;
Game.BOARD_MATRIX = [
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 0]
];


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const Game_1 = __webpack_require__(/*! ./Game */ "./src/Game.ts");
const utils_1 = __webpack_require__(/*! ./utils */ "./src/utils.ts");
new Game_1.default(
// tslint:disable-next-line:only-arrow-functions
function () {
    console.log('Game has started!');
}, function () {
    // const state = this.state;
    const player = this.getCurrentPlayerLabel();
    console.log(`${player} moves ...`);
}, function () {
    const state = this.state;
    const player = this.getCurrentPlayerLabel();
    console.log(`It's ${player}'s turn`);
    // Random AI
    if (state.currentPlayer === Game_1.Player.O) {
        const freeBoardTilesByIndex = state.boardMatrix.reduce((acc, value) => {
            return acc.concat(value);
        }, []).reduce((acc2, value2, index) => {
            if (value2 > 0) {
                return acc2;
            }
            acc2.push(index);
            return acc2;
        }, []);
        console.log(freeBoardTilesByIndex);
        const randomIndex = utils_1.randomInt(0, freeBoardTilesByIndex.length - 1);
        const tileIndex = freeBoardTilesByIndex[randomIndex];
        document.querySelector(`#box-${tileIndex}`).click();
    }
}, function () {
    const state = this.state;
    if (state.result === Game_1.GameResult.WIN) {
        console.log(`${state.winner} has won!!!`);
    }
    else if (state.result === Game_1.GameResult.DRAW) {
        console.log(`Damn it's a draw!`);
    }
}).start();


/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.randomInt = exports.unique = void 0;
// Returns only the unique values of an array.
// eg. input [1,1,1] returns [1]
// eg. input [1,2,1] returns [1,2]
function unique(arr) {
    return arr.reduce((acc, currentValue) => {
        if (!acc.includes(currentValue)) {
            acc.push(currentValue);
        }
        return acc;
    }, []);
}
exports.unique = unique;
function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
exports.randomInt = randomInt;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/index.ts");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,